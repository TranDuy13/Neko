{"version":3,"file":"static/js/139.4c12aeaf.chunk.js","mappings":"+TA6HA,UAxGA,WACE,OAAwCA,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,OAAjB,IAA5CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,QACtBC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,UAAW,IAEbC,SAAU,SAACC,GACTP,GAASQ,EAAAA,EAAAA,IAAkBD,GAC5B,EACDE,iBAAkBC,EAAAA,GAAW,CAC3BL,UAAWK,EAAAA,KAAaC,IAAI,KAAKC,SAAS,6DAgB9C,OAbAC,EAAAA,EAAAA,YAAU,WACRC,SAASC,MAAQ,uCACjBf,GAASgB,EAAAA,EAAAA,MACV,GAAC,CAACA,EAAAA,MACHH,EAAAA,EAAAA,YAAU,WACLhB,GACDoB,EAAAA,GAAAA,QAAc,yDAEbnB,GACDmB,EAAAA,GAAAA,MAAYlB,EAEf,KAGC,+BACE,UAAC,IAAD,CAAemB,MAAOA,EAAAA,EAAtB,WACE,SAAC,IAAD,WAEI,SAAC,IAAD,CACEC,UAAU,OACVC,GAAI,CACFC,SAAU,EACVC,GAAI,GAJR,UAOE,UAAC,IAAD,CAAWC,SAAS,KAApB,WACE,SAAC,IAAD,CAAYH,GAAI,CAAEI,GAAI,GAAKC,QAAQ,KAAnC,yCAGA,SAAC,KAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,SAAC,KAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAA7B,UACE,iBAAMzB,SAAUJ,EAAO8B,aAAvB,UACE,UAAC,IAAD,YACE,SAAC,IAAD,CAAYjB,MAAM,kCAClB,SAAC,IAAD,KACA,SAAC,IAAD,WACE,SAAC,KAAD,CAAMW,WAAS,EAACC,QAAS,EAAzB,UACE,SAAC,KAAD,CAAMC,MAAI,EAACE,GAAI,GAAIC,GAAI,GAAvB,UACE,SAAC,IAAD,CACEE,WAAS,EACTC,MAAOC,QACLjC,EAAOkC,QAAQ/B,WACbH,EAAOmC,OAAOhC,WAElBiC,WACEpC,EAAOkC,QAAQ/B,WACfH,EAAOmC,OAAOhC,UAEhBkC,MAAM,YACNC,KAAK,YACLC,OAAQvC,EAAOwC,WACfC,SAAUzC,EAAO0C,aACjBnB,QAAQ,WACRb,UAAQ,WAKhB,SAAC,IAAD,KACA,SAAC,IAAD,CACEQ,GAAI,CACFyB,QAAS,OACTC,eAAgB,WAChBC,EAAG,GAJP,UAOE,SAAC,IAAD,CACEC,MAAM,UACNvB,QAAQ,YACRwB,KAAK,SAHP,yCAkBlB,SAAC,KAAD,QAIP,C","sources":["pages/AddProductType.jsx"],"sourcesContent":["import { Container, Grid } from \"@mui/material\";\nimport { DashboardLayout } from \"../components/dashboard-layout\";\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport { useFormik } from \"formik\";\nimport { theme } from \"../theme\";\nimport { useEffect } from \"react\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Divider,\n  Typography,\n  TextField,\n  CardHeader,\n} from \"@mui/material\";\nimport * as Yup from \"yup\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createTypeProduct, reset } from \"../components/features/product/productSlice\";\n\nfunction AddProductType() {\n  const { isSuccess, isError, message } = useSelector((state) => state.product);\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      name_type: \"\",\n    },\n    onSubmit: (values) => {\n      dispatch(createTypeProduct(values));\n    },\n    validationSchema: Yup.object({\n      name_type: Yup.string().max(255).required(\"Loại sản phẩm là bắt buộc\"),\n    }),\n  });\n  useEffect(() => {\n    document.title = \"Thêm loại sản phẩm\";\n    dispatch(reset())\n  },[reset]);\n  useEffect(() => {\n    if(isSuccess){\n      toast.success(\"Thêm loại sản phẩm thành công\")\n    }\n    if(isError){\n      toast.error(message)\n    }\n  });\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <DashboardLayout>\n          {\n            <Box\n              component=\"main\"\n              sx={{\n                flexGrow: 1,\n                py: 8,\n              }}\n            >\n              <Container maxWidth=\"lg\">\n                <Typography sx={{ mb: 3 }} variant=\"h4\">\n                  Thêm sản phẩm\n                </Typography>\n                <Grid container spacing={3}>\n                  <Grid item lg={8} md={6} xs={12}>\n                    <form onSubmit={formik.handleSubmit}>\n                      <Card>\n                        <CardHeader title=\"Loại sản phẩm\" />\n                        <Divider />\n                        <CardContent>\n                          <Grid container spacing={3}>\n                            <Grid item md={12} xs={12}>\n                              <TextField\n                                fullWidth\n                                error={Boolean(\n                                  formik.touched.name_type &&\n                                    formik.errors.name_type\n                                )}\n                                helperText={\n                                  formik.touched.name_type &&\n                                  formik.errors.name_type\n                                }\n                                label=\"Loại\"\n                                name=\"name_type\"\n                                onBlur={formik.handleBlur}\n                                onChange={formik.handleChange}\n                                variant=\"outlined\"\n                                required\n                              />\n                            </Grid>\n                          </Grid>\n                        </CardContent>\n                        <Divider />\n                        <Box\n                          sx={{\n                            display: \"flex\",\n                            justifyContent: \"flex-end\",\n                            p: 2,\n                          }}\n                        >\n                          <Button\n                            color=\"primary\"\n                            variant=\"contained\"\n                            type=\"submit\"\n                          >\n                            Lưu\n                          </Button>\n                        </Box>\n                      </Card>\n                    </form>\n                  </Grid>\n                </Grid>\n              </Container>\n              \n            </Box>\n \n          }\n        </DashboardLayout>\n        <ToastContainer/>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default AddProductType;\n"],"names":["useSelector","state","product","isSuccess","isError","message","dispatch","useDispatch","formik","useFormik","initialValues","name_type","onSubmit","values","createTypeProduct","validationSchema","Yup","max","required","useEffect","document","title","reset","toast","theme","component","sx","flexGrow","py","maxWidth","mb","variant","container","spacing","item","lg","md","xs","handleSubmit","fullWidth","error","Boolean","touched","errors","helperText","label","name","onBlur","handleBlur","onChange","handleChange","display","justifyContent","p","color","type"],"sourceRoot":""}